{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the BioMate BioMate represents a collection of scripts and utility tools for everyday processing of biological data, conveniently gathered into a single Python package. To check the package information and available sub-commands, you can run biomate --help . Available tools Blabber - FASTA, FASTQ or plain text sequence generator. It can be used to re-generate a demultiplexed flowcell folder using a sample sheet as input. Dirstruct - Extract or create a directory structure. It can be used to simulate nested folder structures for testing purposes. Index - Indexing tool for FASTA/FASTQ files. It can be used to search for expected indexes and get 'fuzzy' information. FastRewind - Convert a demultiplexed folder back into the Illumina NovaSeqXPlus output. It can be used to generate a subset for demultiplex testing. General options In addition to the --version option, which prints the current version of the BioMate package, the following options can be provided before any sub-command ( e.g. biomate <OPTION> <SUBCOMMAND> ), and they will be propagated to the sub-command execution: --verbose : Increase verbosity of the output by setting the logging level to DEBUG . This will print additional information about the execution of the sub-command. --quiet : Decrease verbosity of the output by setting the logging level to WARNING . This will suppress most of the output, only printing warnings and errors. Note: By default, the logging level is set to INFO , which will print general information about the execution of the sub-command, but not the detailed debug information. Important: In some cases (e.g. when the output will be printed to the standard output), the --quiet option will be applied automatically to avoid cluttering the output with unnecessary information. In such cases, the logging level will be set to WARNING regardless of the --verbose or --quiet options.","title":"Home"},{"location":"#welcome-to-the-biomate","text":"BioMate represents a collection of scripts and utility tools for everyday processing of biological data, conveniently gathered into a single Python package. To check the package information and available sub-commands, you can run biomate --help .","title":"Welcome to the BioMate"},{"location":"#available-tools","text":"Blabber - FASTA, FASTQ or plain text sequence generator. It can be used to re-generate a demultiplexed flowcell folder using a sample sheet as input. Dirstruct - Extract or create a directory structure. It can be used to simulate nested folder structures for testing purposes. Index - Indexing tool for FASTA/FASTQ files. It can be used to search for expected indexes and get 'fuzzy' information. FastRewind - Convert a demultiplexed folder back into the Illumina NovaSeqXPlus output. It can be used to generate a subset for demultiplex testing.","title":"Available tools"},{"location":"#general-options","text":"In addition to the --version option, which prints the current version of the BioMate package, the following options can be provided before any sub-command ( e.g. biomate <OPTION> <SUBCOMMAND> ), and they will be propagated to the sub-command execution: --verbose : Increase verbosity of the output by setting the logging level to DEBUG . This will print additional information about the execution of the sub-command. --quiet : Decrease verbosity of the output by setting the logging level to WARNING . This will suppress most of the output, only printing warnings and errors. Note: By default, the logging level is set to INFO , which will print general information about the execution of the sub-command, but not the detailed debug information. Important: In some cases (e.g. when the output will be printed to the standard output), the --quiet option will be applied automatically to avoid cluttering the output with unnecessary information. In such cases, the logging level will be set to WARNING regardless of the --verbose or --quiet options.","title":"General options"},{"location":"blabber/","text":"Blabber This module allows to generate different flavours of FASTA, FASTQ or plain text sequences. It can be used to re-generate a flowcell folder using a sample sheet as input, or to simply generate random sequences for testing purposes. Usage The minimal command is biomate blabber , which will generate 100 random 50 nucleotide long sequences in TEXT format (one sequence per line), using the standard nucleotide alphabet (A, C, G, T), and it will print them to the standard output. Options --seq-number : Number of sequences to generate. Default is 100. --seq-length : Length of each sequence. Default is 50. --alphabet : Alphabet to use for sequence generation. Default is 'ACGT'. --output : Path to the output file. If not specified, the output will be printed to the standard output. If a sample sheet is provided, this must be a directory where the flowcell folder will be created. --format : Format of the output sequences. Can be 'fasta', 'fastq', 'fastq-ext' or 'text'. Default is 'text'. The 'fastq-ext' format includes additional information in the FASTQ header. --sample-sheet : Path to a sample sheet file. If provided, the output will be generated based on the sample sheet, creating a flowcell folder structure. The sample sheet should be in the format used by Illumina sequencing systems, with the Sample Sheet Usage When a sample sheet is provided, the output will be generated based on the sample sheet, creating a flowcell folder structure. The sample sheet should be in the format used by Illumina sequencing systems, at least with the following columns: FCID : Flowcell ID. Lane : Lane number. Sample_ID : Sample ID. Recipe : Recipe name. Sample_Project : Sample project name. Note: The --seq-length and --format options will be ignored when a sample sheet is provided, as the sequence lengths will be derived from the Recipe column in the sample sheet, and the format will be set to 'fastq-ext'. The name of the output directory will have the following format: <DATE>_<RAND_1>_<RAND_2>_A<FCID> , where <DATE> is the current date in YYYYMMDD format, <RAND_1> is a random 2-character string followed by a random 5-digit number, and <RAND_2> is a random 4-digit number, and <FCID> is the Flowcell ID from the sample sheet. Within the output flowcell folder, a Demultiplexing folder will be created, containing Sample_Project subfolders and the Undetermined FASTQ files for each lane. Each Sample_Project The Sample_ID subfolders that in turn contain the FASTQ files for each sample. The FASTQ files will be named according to the following pattern: <Sample_Name>_<RAND_1>_S<RAND_2>_<Lane>_R[12]_001.fastq.gz , where <Sample_Name> is derived from the corresponding column in the sample sheet, <RAND_1> is a 4-digit random number, <RAND_2> is the sample index (from 1 to the total number of samples in the flowcell), and <Lane> is the lane number from the sample sheet, converted to the format LXXX (e.g., L001 for lane 1). The --seq-number and --alphabet options will be used to generate the content of the FASTQ files, with the specified number of sequences and using the specified alphabet. The generated sequences will be random, but their identifiers will be consistent among paired reads (R1 and R2) to ensure they can be processed correctly in downstream applications. The input sample sheet will be copied to the flowcell folder as SampleSheet.csv . Example Folder Structure 20250613_ON46080_0992_A34YHADSA7 \u251c\u2500\u2500 Demultiplexing \u2502 \u251c\u2500\u2500 A__Lpha_25_01 \u2502 \u2502 \u251c\u2500\u2500 Sample_P41583_101 \u2502 \u2502 \u2502 \u251c\u2500\u2500 P41583_101_S1_L001_R1_001.fastq.gz \u2502 \u2502 \u2502 \u2514\u2500\u2500 P41583_101_S1_L001_R2_001.fastq.gz \u2502 \u2502 \u2514\u2500\u2500 Sample_P41583_102 \u2502 \u2502 \u251c\u2500\u2500 P41583_102_S2_L001_R1_001.fastq.gz \u2502 \u2502 \u2514\u2500\u2500 P41583_102_S2_L001_R2_001.fastq.gz \u2502 \u2514\u2500\u2500 Undetermined_S0_L001_R1_001.fastq.gz \u2502 \u2514\u2500\u2500 Undetermined_S0_L001_R2_001.fastq.gz \u2514\u2500\u2500 SampleSheet.csv Simulating Mixed Design Recipes When generating sequences based on a sample sheet, it is possible to simulate cases in which multiple recipes are present on the same lane. Running the demux process sequentially for each recipe will result in the unassigned files containing redundant reads belonging to the other recipes. By using the taint option, the unassigned reads contain ~10% of the reads from each sample present in the shared lane.","title":"Blabber"},{"location":"blabber/#blabber","text":"This module allows to generate different flavours of FASTA, FASTQ or plain text sequences. It can be used to re-generate a flowcell folder using a sample sheet as input, or to simply generate random sequences for testing purposes.","title":"Blabber"},{"location":"blabber/#usage","text":"The minimal command is biomate blabber , which will generate 100 random 50 nucleotide long sequences in TEXT format (one sequence per line), using the standard nucleotide alphabet (A, C, G, T), and it will print them to the standard output.","title":"Usage"},{"location":"blabber/#options","text":"--seq-number : Number of sequences to generate. Default is 100. --seq-length : Length of each sequence. Default is 50. --alphabet : Alphabet to use for sequence generation. Default is 'ACGT'. --output : Path to the output file. If not specified, the output will be printed to the standard output. If a sample sheet is provided, this must be a directory where the flowcell folder will be created. --format : Format of the output sequences. Can be 'fasta', 'fastq', 'fastq-ext' or 'text'. Default is 'text'. The 'fastq-ext' format includes additional information in the FASTQ header. --sample-sheet : Path to a sample sheet file. If provided, the output will be generated based on the sample sheet, creating a flowcell folder structure. The sample sheet should be in the format used by Illumina sequencing systems, with the","title":"Options"},{"location":"blabber/#sample-sheet-usage","text":"When a sample sheet is provided, the output will be generated based on the sample sheet, creating a flowcell folder structure. The sample sheet should be in the format used by Illumina sequencing systems, at least with the following columns: FCID : Flowcell ID. Lane : Lane number. Sample_ID : Sample ID. Recipe : Recipe name. Sample_Project : Sample project name. Note: The --seq-length and --format options will be ignored when a sample sheet is provided, as the sequence lengths will be derived from the Recipe column in the sample sheet, and the format will be set to 'fastq-ext'. The name of the output directory will have the following format: <DATE>_<RAND_1>_<RAND_2>_A<FCID> , where <DATE> is the current date in YYYYMMDD format, <RAND_1> is a random 2-character string followed by a random 5-digit number, and <RAND_2> is a random 4-digit number, and <FCID> is the Flowcell ID from the sample sheet. Within the output flowcell folder, a Demultiplexing folder will be created, containing Sample_Project subfolders and the Undetermined FASTQ files for each lane. Each Sample_Project The Sample_ID subfolders that in turn contain the FASTQ files for each sample. The FASTQ files will be named according to the following pattern: <Sample_Name>_<RAND_1>_S<RAND_2>_<Lane>_R[12]_001.fastq.gz , where <Sample_Name> is derived from the corresponding column in the sample sheet, <RAND_1> is a 4-digit random number, <RAND_2> is the sample index (from 1 to the total number of samples in the flowcell), and <Lane> is the lane number from the sample sheet, converted to the format LXXX (e.g., L001 for lane 1). The --seq-number and --alphabet options will be used to generate the content of the FASTQ files, with the specified number of sequences and using the specified alphabet. The generated sequences will be random, but their identifiers will be consistent among paired reads (R1 and R2) to ensure they can be processed correctly in downstream applications. The input sample sheet will be copied to the flowcell folder as SampleSheet.csv .","title":"Sample Sheet Usage"},{"location":"blabber/#example-folder-structure","text":"20250613_ON46080_0992_A34YHADSA7 \u251c\u2500\u2500 Demultiplexing \u2502 \u251c\u2500\u2500 A__Lpha_25_01 \u2502 \u2502 \u251c\u2500\u2500 Sample_P41583_101 \u2502 \u2502 \u2502 \u251c\u2500\u2500 P41583_101_S1_L001_R1_001.fastq.gz \u2502 \u2502 \u2502 \u2514\u2500\u2500 P41583_101_S1_L001_R2_001.fastq.gz \u2502 \u2502 \u2514\u2500\u2500 Sample_P41583_102 \u2502 \u2502 \u251c\u2500\u2500 P41583_102_S2_L001_R1_001.fastq.gz \u2502 \u2502 \u2514\u2500\u2500 P41583_102_S2_L001_R2_001.fastq.gz \u2502 \u2514\u2500\u2500 Undetermined_S0_L001_R1_001.fastq.gz \u2502 \u2514\u2500\u2500 Undetermined_S0_L001_R2_001.fastq.gz \u2514\u2500\u2500 SampleSheet.csv","title":"Example Folder Structure"},{"location":"blabber/#simulating-mixed-design-recipes","text":"When generating sequences based on a sample sheet, it is possible to simulate cases in which multiple recipes are present on the same lane. Running the demux process sequentially for each recipe will result in the unassigned files containing redundant reads belonging to the other recipes. By using the taint option, the unassigned reads contain ~10% of the reads from each sample present in the shared lane.","title":"Simulating Mixed Design Recipes"},{"location":"dirstruct/","text":"Dirstruct This module allows you to extract or create a directory structure. It can be used to extract the structure of a given directory whose contents are too large to copy, or to re-create a directory structure for testing purposes. Usage There are two main commands in this module: biomate dirstruct extract : Extracts the directory structure of a given directory. biomate dirstruct create : Creates a directory structure based on a given template. Extracting Directory Structure The command biomate dirstruct extract allows you to extract the directory structure of a specified directory. This is useful, in combination with the create command, to recreate the structure without copying the contents. To run the extraction, the command is biomate dirstruct extract --source-path <SOURCE_PATH> --output-file <OUTPUT_FILE> , where <SOURCE_PATH> is the path to the directory you want to extract, and <OUTPUT_FILE> is the path to the output file where the directory structure will be saved. If the output file is not specified, the structure will be printed to the standard output. Output File Format The output file contains a list of relative paths to directories and files, in top-down hierarchical order, with each line representing either a directory or a file. By default, a tab character is used to separate the path component from a tag indicating whether the path is a directory ('dir') or a file ('file'). For example: path/to/directory/ dir path/to/directory/file.txt file path/to/another/directory/ dir path/to/another/directory/file2.txt file The tab-separated tags are optional and can be omitted by using the --no-tags option. In this case, the output will simply be a list of relative paths without any additional information. However, the tags can be useful when regenerating the directory structure to distinguish between directories and files (see below). Creating Directory Structure The command biomate dirstruct create allows you to create a directory structure based on a given file, usually generated by the extract command. However, the input file can also be manually created or modified to suit your needs. To create a directory structure, the command is biomate dirstruct create --input-file <INPUT_FILE> --output-path <OUTPUT_PATH> , where <INPUT_FILE> is the path to the file containing the information on the directory structure, and <OUTPUT_PATH> is the path where it will be created. If the output path is not specified, the structure will be created in the current working directory. Note: The create command will not delete any additional files or directories already present in the output path. It will only create the directories and files specified in the input file. If a file already exists at a specified path, it will be overwritten without warning. The create command will only touch the generated files, meaning it will create empty files with the specified names. If you want to populate the files with content, you will need to do that separately after the structure has been created. Input File Format The input file should contain a list of relative paths to directories and files, similar to the output format of the extract command. Each line should represent either a directory or a file, with an optional tab character separating the path from a tag indicating whether it is a directory ('dir') or a file ('file'). As an example, please refer to the output file format described above. If the tags are present, the create command will use them to determine whether to create a directory or a file at each path. If the tags are omitted, the command will assume that all paths without an extension are directories and all paths with an extension are files. In this case, if a file cannot be create, for whatever reason, the module will attempt to create the parent directories first, and then create the file.","title":"Dirstruct"},{"location":"dirstruct/#dirstruct","text":"This module allows you to extract or create a directory structure. It can be used to extract the structure of a given directory whose contents are too large to copy, or to re-create a directory structure for testing purposes.","title":"Dirstruct"},{"location":"dirstruct/#usage","text":"There are two main commands in this module: biomate dirstruct extract : Extracts the directory structure of a given directory. biomate dirstruct create : Creates a directory structure based on a given template.","title":"Usage"},{"location":"dirstruct/#extracting-directory-structure","text":"The command biomate dirstruct extract allows you to extract the directory structure of a specified directory. This is useful, in combination with the create command, to recreate the structure without copying the contents. To run the extraction, the command is biomate dirstruct extract --source-path <SOURCE_PATH> --output-file <OUTPUT_FILE> , where <SOURCE_PATH> is the path to the directory you want to extract, and <OUTPUT_FILE> is the path to the output file where the directory structure will be saved. If the output file is not specified, the structure will be printed to the standard output.","title":"Extracting Directory Structure"},{"location":"dirstruct/#output-file-format","text":"The output file contains a list of relative paths to directories and files, in top-down hierarchical order, with each line representing either a directory or a file. By default, a tab character is used to separate the path component from a tag indicating whether the path is a directory ('dir') or a file ('file'). For example: path/to/directory/ dir path/to/directory/file.txt file path/to/another/directory/ dir path/to/another/directory/file2.txt file The tab-separated tags are optional and can be omitted by using the --no-tags option. In this case, the output will simply be a list of relative paths without any additional information. However, the tags can be useful when regenerating the directory structure to distinguish between directories and files (see below).","title":"Output File Format"},{"location":"dirstruct/#creating-directory-structure","text":"The command biomate dirstruct create allows you to create a directory structure based on a given file, usually generated by the extract command. However, the input file can also be manually created or modified to suit your needs. To create a directory structure, the command is biomate dirstruct create --input-file <INPUT_FILE> --output-path <OUTPUT_PATH> , where <INPUT_FILE> is the path to the file containing the information on the directory structure, and <OUTPUT_PATH> is the path where it will be created. If the output path is not specified, the structure will be created in the current working directory. Note: The create command will not delete any additional files or directories already present in the output path. It will only create the directories and files specified in the input file. If a file already exists at a specified path, it will be overwritten without warning. The create command will only touch the generated files, meaning it will create empty files with the specified names. If you want to populate the files with content, you will need to do that separately after the structure has been created.","title":"Creating Directory Structure"},{"location":"dirstruct/#input-file-format","text":"The input file should contain a list of relative paths to directories and files, similar to the output format of the extract command. Each line should represent either a directory or a file, with an optional tab character separating the path from a tag indicating whether it is a directory ('dir') or a file ('file'). As an example, please refer to the output file format described above. If the tags are present, the create command will use them to determine whether to create a directory or a file at each path. If the tags are omitted, the command will assume that all paths without an extension are directories and all paths with an extension are files. In this case, if a file cannot be create, for whatever reason, the module will attempt to create the parent directories first, and then create the file.","title":"Input File Format"},{"location":"fastrewind/","text":"FastRewind This module allows to convert a series of FASTQ files back into the Illumina NovaSeqXPlus instrument outputs. It can be used to re-generate the whole or a subset of the flowcell output folder to be used for demultiplex testing purposes. IMPORTANT: Due to the way the data must be read, processed and written, the procedure is mainly I/O bound. On a standard laptop, it takes ~2 hours to convert a 100M paired-end reads back into BCL files. Nevertheless, the certain I/O operation can be sped up by providing more than the default single-thread to the dnaio package to compressed and decompress inputs and outputs; this can be done via the --threads option. Finally, there are probably some other tweaks that can be implemented to shift the trade-off between in-memory and on-disk operations, though these have not been included since the idea is that the module should be able to run even on machine with limited resources. Usage The minimal command is biomate fastrewind --input <PATH> . This will search for FASTQ file(s) and the SampleSheet.csv file, from which it will extract the information regarding the run (mainly, the number of cycles, and how they are split between reads and indexes). Options --input-path : Path to the input flowcell directory containing demultiplexed FASTQ files. --output-path : Path to the output directory where the BCL structure will be created (default: current directory). --sample-sheet : Path to the Sample Sheet file. If not provided, the script will look for SampleSheet.csv in the input directory. --total-cycles : The total number of cycles. If this is larger than the sequences in the samples, shorter samples will be filled with Ns. --instrument : The type of Illumina instrument, which will determine the type of outputs and folder structure. Please, be aware that only the NovaSeqXPlus is currently supported. --threads : Number of threads used by dnaio to read/write files. Default is 0, which corresponds to a single thread. --force : Force overwrite of existing files in the output directory. Workflow Schematic Diagram Notes and References The conversion between Python values and C structs represented as Python bytes objects was carried out using the struct package. Illumina Resources Sequencing Outputs Output Folder Structure Quality Scores Flowcell Components bcl2fastq Encoding BCL Header and Nucleotides Examples bcl2fastr well_duplicates picard Challenges related to the I/O As mentioned above, the module is generating a lot of I/O pressure. This is due to the way the data must be transformed and aggregated, in order to re-create the original outputs. FASTQ files are constituted by entries of four lines that include the read identifier, sequence and quality strings. However, each of these lines collects its information content from one or more lanes, several tiles and one or more surfaces. Indeed, when the instrument outputs are produced, the data belonging to individual reads is stored into separate files, and is then aggregated into the final FASTQ entries after running the demultiplexing tools, such as BCL-convert or bcl2fastq. For example, the Data/Intensities/BaseCalls folder structure is organised in lanes sub-folders (e.g. L001 , L002 , etc.), and each of these contains cycle folders (e.g. C1.1 , C2.1 , C3.1 , etc.). The latter contain a .cbcl file for each surface (e.g. L001_1.cbcl , L001_2.cbcl , etc.) that, in turn, encodes the nucleaotide and quality information for all tiles. This means that converting even a single read back into the files from which it derives would results in having to create and edit at least N (or N + N for paired-end reads) files, where N is the length of the read. The number of files can become as large as (N + N) _ T _ L * S, where T, L, and S are the numbers tiles, lanes and surfaces, respectively. Considering the type of structure, it seemed sensible to process the input files by lane, as this information is generally present in the FASTQ filename and, therefore, the inputs can be subset and grouped accordingly. Although one can think of sequentially working on and storing in-memory each lane data, this solution is rather unfeasible on non-HPC machines, such as laptops or workstations, due to the lower amout of memory at their disposal. So, the solution was to process all reads from FASTQ files belonging to one lane into separate files, then delete all the intermediate files and proceed with the next lane: Lane 1 --> Generate intermediate files --> Write to final outputs --> Delete intermediate files Lane 2 --> Generate intermediate files --> Write to final outputs --> Delete intermediate files Lane 3 --> Generate intermediate files --> Write to final outputs --> Delete intermediate files ... In addition, since the orginal data is produced without considering the experimental design, read pairs, indexes/barcodes and qualities must be merged into new reads. All sequences from the same read group are concatenated, as are all their qualities: >Read_1:1 CTAGCATG + I#IIIIII >Read_1:2 CTAGCTCA + I#9IIIII >Merged_read_1 CTAGCATGCTAGCTCA + I#IIIIIII#9IIIII Finally, to understand into which file the resulting merged read should be written, the information must be extracted from the read identifier, which has the following structure: <instrument>:<run_number>:<flowcell_id>:<lane>:<tile>:<x_pos>:<y_pos> <read_index>:<is_filtered>:<control_number>:<index_sequence(s)> while the 4-digit tile label can be further split into: <surface_digit><swath_digit><tile_2digits> Since the nucleotide information is stored by tile inside the compressed BCL files and there is one BCL file per surface, it seemed reasonable to split, group and dump the reads into <surface>_<tile>.fastq.gz files. In fact, in the final step, these files will be read one at the time, by surface and tile, and the tiles will be written sequentially to all_<cycle>_tiles.cbcl files. Also in this case, the latter represent intermediate files that are, however, necessary since the header of the final .cbcl includes the information about the decompressed and compressed size of the collected and individual tiles blocks and, therefore, it can only be added once all the latter have been generated.","title":"FastRewind"},{"location":"fastrewind/#fastrewind","text":"This module allows to convert a series of FASTQ files back into the Illumina NovaSeqXPlus instrument outputs. It can be used to re-generate the whole or a subset of the flowcell output folder to be used for demultiplex testing purposes. IMPORTANT: Due to the way the data must be read, processed and written, the procedure is mainly I/O bound. On a standard laptop, it takes ~2 hours to convert a 100M paired-end reads back into BCL files. Nevertheless, the certain I/O operation can be sped up by providing more than the default single-thread to the dnaio package to compressed and decompress inputs and outputs; this can be done via the --threads option. Finally, there are probably some other tweaks that can be implemented to shift the trade-off between in-memory and on-disk operations, though these have not been included since the idea is that the module should be able to run even on machine with limited resources.","title":"FastRewind"},{"location":"fastrewind/#usage","text":"The minimal command is biomate fastrewind --input <PATH> . This will search for FASTQ file(s) and the SampleSheet.csv file, from which it will extract the information regarding the run (mainly, the number of cycles, and how they are split between reads and indexes).","title":"Usage"},{"location":"fastrewind/#options","text":"--input-path : Path to the input flowcell directory containing demultiplexed FASTQ files. --output-path : Path to the output directory where the BCL structure will be created (default: current directory). --sample-sheet : Path to the Sample Sheet file. If not provided, the script will look for SampleSheet.csv in the input directory. --total-cycles : The total number of cycles. If this is larger than the sequences in the samples, shorter samples will be filled with Ns. --instrument : The type of Illumina instrument, which will determine the type of outputs and folder structure. Please, be aware that only the NovaSeqXPlus is currently supported. --threads : Number of threads used by dnaio to read/write files. Default is 0, which corresponds to a single thread. --force : Force overwrite of existing files in the output directory.","title":"Options"},{"location":"fastrewind/#workflow-schematic-diagram","text":"","title":"Workflow Schematic Diagram"},{"location":"fastrewind/#notes-and-references","text":"The conversion between Python values and C structs represented as Python bytes objects was carried out using the struct package.","title":"Notes and References"},{"location":"fastrewind/#illumina-resources","text":"Sequencing Outputs Output Folder Structure Quality Scores Flowcell Components bcl2fastq","title":"Illumina Resources"},{"location":"fastrewind/#encoding-bcl-header-and-nucleotides-examples","text":"bcl2fastr well_duplicates picard","title":"Encoding BCL Header and Nucleotides Examples"},{"location":"fastrewind/#challenges-related-to-the-io","text":"As mentioned above, the module is generating a lot of I/O pressure. This is due to the way the data must be transformed and aggregated, in order to re-create the original outputs. FASTQ files are constituted by entries of four lines that include the read identifier, sequence and quality strings. However, each of these lines collects its information content from one or more lanes, several tiles and one or more surfaces. Indeed, when the instrument outputs are produced, the data belonging to individual reads is stored into separate files, and is then aggregated into the final FASTQ entries after running the demultiplexing tools, such as BCL-convert or bcl2fastq. For example, the Data/Intensities/BaseCalls folder structure is organised in lanes sub-folders (e.g. L001 , L002 , etc.), and each of these contains cycle folders (e.g. C1.1 , C2.1 , C3.1 , etc.). The latter contain a .cbcl file for each surface (e.g. L001_1.cbcl , L001_2.cbcl , etc.) that, in turn, encodes the nucleaotide and quality information for all tiles. This means that converting even a single read back into the files from which it derives would results in having to create and edit at least N (or N + N for paired-end reads) files, where N is the length of the read. The number of files can become as large as (N + N) _ T _ L * S, where T, L, and S are the numbers tiles, lanes and surfaces, respectively. Considering the type of structure, it seemed sensible to process the input files by lane, as this information is generally present in the FASTQ filename and, therefore, the inputs can be subset and grouped accordingly. Although one can think of sequentially working on and storing in-memory each lane data, this solution is rather unfeasible on non-HPC machines, such as laptops or workstations, due to the lower amout of memory at their disposal. So, the solution was to process all reads from FASTQ files belonging to one lane into separate files, then delete all the intermediate files and proceed with the next lane: Lane 1 --> Generate intermediate files --> Write to final outputs --> Delete intermediate files Lane 2 --> Generate intermediate files --> Write to final outputs --> Delete intermediate files Lane 3 --> Generate intermediate files --> Write to final outputs --> Delete intermediate files ... In addition, since the orginal data is produced without considering the experimental design, read pairs, indexes/barcodes and qualities must be merged into new reads. All sequences from the same read group are concatenated, as are all their qualities: >Read_1:1 CTAGCATG + I#IIIIII >Read_1:2 CTAGCTCA + I#9IIIII >Merged_read_1 CTAGCATGCTAGCTCA + I#IIIIIII#9IIIII Finally, to understand into which file the resulting merged read should be written, the information must be extracted from the read identifier, which has the following structure: <instrument>:<run_number>:<flowcell_id>:<lane>:<tile>:<x_pos>:<y_pos> <read_index>:<is_filtered>:<control_number>:<index_sequence(s)> while the 4-digit tile label can be further split into: <surface_digit><swath_digit><tile_2digits> Since the nucleotide information is stored by tile inside the compressed BCL files and there is one BCL file per surface, it seemed reasonable to split, group and dump the reads into <surface>_<tile>.fastq.gz files. In fact, in the final step, these files will be read one at the time, by surface and tile, and the tiles will be written sequentially to all_<cycle>_tiles.cbcl files. Also in this case, the latter represent intermediate files that are, however, necessary since the header of the final .cbcl includes the information about the decompressed and compressed size of the collected and individual tiles blocks and, therefore, it can only be added once all the latter have been generated.","title":"Challenges related to the I/O"},{"location":"indexer/","text":"Index This module allows you to scan a fastq file, either gzipped or uncompressed, and extract the sequences that match a given pattern, or a list of patterns. Usage The command biomate index takes at least two arguments: the path to a FASTQ file ( --input ) and the pattern to search for. The pattern can be a single string or a regular expression ( --index-regex ), or a path to a file containing a list of patterns or regular expressions ( --index-file ). If no output ( --output ) is specified, only the statistics for each matched pattern will be printed to the standard output; otherwise, both the statistics for each matched pattern ( pattern<INDEX>_matches.txt ) and for each edit distance ( pattern<INDEX>_errors.txt ) will be written to files, where <INDEX> is the index of the pattern in the input file or 1 if a single pattern is provided. Options --input : Path to the input FASTQ file. It can be gzipped or uncompressed. --output : Path to the output directory where the results will be saved. If not specified, the results will be printed to the standard output. The output directory will contain two files: indexing_patterns.txt with the statistics for each matched pattern, and indexing_errors.txt with the statistics for each edit distance. --index-regex : Regular expression to search for in the sequences. --index-file : Path to a file containing a list of patterns or regular expressions to search for in the sequences. Each line in the file should contain a single pattern or regular expression. --distance : Maximum edit distance to consider when matching patterns. Default is 0 (exact match). --error-type : Type of error to consider when calculating the edit distance. Can be insertions ( i ), deletions ( d ), substitutions ( s ), or any error ( e ). Default is s . Example of Standard Output When no output is specified, the command will print the statistics for each matched pattern to the standard output. The output will look like this: 0 CATGGGT 3902 0.39%% 0 CATGGTG 3584 0.36%% 0 CATGGTT 3471 0.35%% 0 CATGTTT 2717 0.27%% 0 CATGGGG 88 0.01%% 0 CATGTGT 82 0.01%% 0 CATGTGG 82 0.01%% 0 CATGTTG 79 0.01%% The first column is the edit distance, the second column is the matched pattern, the third column is the number of matches, and the fourth column is the percentage of matches relative to the total number of sequences in the FASTQ file.","title":"Index"},{"location":"indexer/#index","text":"This module allows you to scan a fastq file, either gzipped or uncompressed, and extract the sequences that match a given pattern, or a list of patterns.","title":"Index"},{"location":"indexer/#usage","text":"The command biomate index takes at least two arguments: the path to a FASTQ file ( --input ) and the pattern to search for. The pattern can be a single string or a regular expression ( --index-regex ), or a path to a file containing a list of patterns or regular expressions ( --index-file ). If no output ( --output ) is specified, only the statistics for each matched pattern will be printed to the standard output; otherwise, both the statistics for each matched pattern ( pattern<INDEX>_matches.txt ) and for each edit distance ( pattern<INDEX>_errors.txt ) will be written to files, where <INDEX> is the index of the pattern in the input file or 1 if a single pattern is provided.","title":"Usage"},{"location":"indexer/#options","text":"--input : Path to the input FASTQ file. It can be gzipped or uncompressed. --output : Path to the output directory where the results will be saved. If not specified, the results will be printed to the standard output. The output directory will contain two files: indexing_patterns.txt with the statistics for each matched pattern, and indexing_errors.txt with the statistics for each edit distance. --index-regex : Regular expression to search for in the sequences. --index-file : Path to a file containing a list of patterns or regular expressions to search for in the sequences. Each line in the file should contain a single pattern or regular expression. --distance : Maximum edit distance to consider when matching patterns. Default is 0 (exact match). --error-type : Type of error to consider when calculating the edit distance. Can be insertions ( i ), deletions ( d ), substitutions ( s ), or any error ( e ). Default is s .","title":"Options"},{"location":"indexer/#example-of-standard-output","text":"When no output is specified, the command will print the statistics for each matched pattern to the standard output. The output will look like this: 0 CATGGGT 3902 0.39%% 0 CATGGTG 3584 0.36%% 0 CATGGTT 3471 0.35%% 0 CATGTTT 2717 0.27%% 0 CATGGGG 88 0.01%% 0 CATGTGT 82 0.01%% 0 CATGTGG 82 0.01%% 0 CATGTTG 79 0.01%% The first column is the edit distance, the second column is the matched pattern, the third column is the number of matches, and the fourth column is the percentage of matches relative to the total number of sequences in the FASTQ file.","title":"Example of Standard Output"}]}